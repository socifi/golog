#!/usr/bin/env python3

# Levels contain level names and codes. It is important to note that code is an integer.
# Python allows other values but underlying go code won't allow anything except integers.
levels = {
	"debug": 100,
	"info": 200,
	"notice": 250,
	"warn": 300,
	"error": 400,
	"critical": 500,
	"alert": 550,
	"fatal": 600,
	"emergency": 600
}

# Function for replacing part of file between marks
def replace(file, mark, string):
	s = ""
	mode = "print"
	warn = "/* WARNING: This part is autogenerated! Do not change! */\n\n"
	unwarn = "\n/* END OF WARNING */\n"
	for line in open(file):
		lines = line.strip()
		if lines == "/********* "+mark+" *********/":
			s = s+line
			mode = "skip"
		elif lines == "/********* End "+mark+" *********/":
			s = s+warn+string+unwarn+line
			mode = "print"
		elif mode == "skip":
			pass
		else:
			s = s+line
	with open(file, "w") as f:
		f.write(s)


#########################
# Entry simple messages #
#########################
s = ""
for level in levels:
	f = level.title()
	s = s+"""// %s level message.
func (e *Entry) %s(msg string) {
	e.Logger.log(%sLevel, e, msg)
}

""" % (f, f, f)

replace("entry.go", "Entry simple", s)

###########################
# Entry formated messages #
###########################
s = ""
for level in levels:
	f = level.title()
	s = s+"""// %sf level formatted message.
func (e *Entry) %sf(msg string, v ...interface{}) {
	e.%s(fmt.Sprintf(msg, v...))
}

""" % (f, f, f)
replace("entry.go", "Entry formated", s)


#######################
# Log simple messages #
#######################
s = ""
for level in levels:
	f = level.title()
	s = s+"""// %s level message.
func (l *Logger) %s(msg string) {
	NewEntry(l).%s(msg)
}

""" % (f, f, f)
replace("logger.go", "Log simple", s)


#########################
# Log formated messages #
#########################
s = ""
for level in levels:
	f = level.title()
	s = s+"""// %sf level formatted message.
func (l *Logger) %sf(msg string, v ...interface{}) {
	NewEntry(l).%sf(msg, v...)
}

""" % (f, f, f)
replace("logger.go", "Log formated", s)

############################
# Pkg wide simple messages #
############################
s = ""
for level in levels:
	f = level.title()
	s = s+"""// %s level message.
func %s(msg string) {
	Log.%s(msg)
}

""" % (f, f, f)
replace("pkg.go", "Pkg wide simple", s)


##############################
# Pkg wide formated messages #
##############################
s = ""
for level in levels:
	f = level.title()
	s = s+"""// %sf level message.
func %sf(msg string, v ...interface{}) {
	Log.%sf(msg, v...)
}

""" % (f, f, f)
replace("pkg.go", "Pkg wide formated", s)


#############################
# Interface simple messages #
#############################
s = ""
for level in levels:
	f = level.title()
	s = s+"	%s(msg string)\n" % (f)
replace("interface.go", "Interface simple", s)

###############################
# Interface formated messages #
###############################
s = ""
for level in levels:
	f = level.title()
	s = s+"	%sf(msg string, v ...interface{})\n" % (f)
replace("interface.go", "Interface formated", s)

#################
# Level numbers #
#################
s = ""
for level, n in levels.items():
	f = level.lower()
	s = s+"	%sLevel = %d\n" % (f.title(),n)
replace("levels.go", "Level numbers", s)

###########################
# Levels names to numbers #
###########################
s = ""
c = set()
for level, n in levels.items():
	f = level.lower()
	if n not in c:
		c.add(n)
		s = s+"	%sLevel:	\"%s\",\n" % (f.title(), f)
replace("levels.go", "Level no:name", s)

###########################
# Levels numbers to names #
###########################
s = ""
for level, n in levels.items():
	f = level.lower()
	s = s+"	\"%s\":	%sLevel,\n" % (f, f.title())
replace("levels.go", "Level name:no", s)
